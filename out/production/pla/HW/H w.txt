31/07/2025 H w

1. find the row having max ele

2. print spiral form

3. search the ele given and print its index

4. rotate the matrix into 90degree clockwise

5. sum of two matrix in 3rd matrix



01/08/2025 H W


1. Check if glven year is leap year or not in linkedlist

2. check if numbers in linkedlist are Armstrong number or not

3.Remove the whitespacas in a string linkedlist

4.count number of even and odd in linkedlist

5.Traverse through each elaments in Linkedlist and Create a new Linked list using factorial values of previous linkedlist


02/08/2025  H W

1.Task Manager[LinkedList/Stack/Queue]
         1.Add tasks
         2,Remove tasks
         3. Modify tasks
         4.List tasks
         5.Exit

2.Currency Calculator
        1. Rupees to USD
        2, USD to Rupees
        3. Rupees to Euro
        4. Euro to Rupees
        5. Exit


3. Student Management System[Linkedlist/Stack/Queue]
        1.Add Student
        2.Remove Student
        3.List Students
        4.Modify Details
        5.Search Student
        6,Exit


        {{{
        package HW.AUGUST02.progams;

        import java.util.*;

        public class StudentManagement {
            public static void main(String[] args) {
                Scanner sc = new Scanner(System.in);
                StudentManagement run = new StudentManagement();
                int choice;
                do {
                    System.out.println("-----OUTPUT BY JAMES J-----");
                    System.out.println("-----TASK MANAGER WITH STACK, QUEUE & LINKEDLIST-----");
                    System.out.println("1. Add Task");
                    System.out.println("2. Remove Task");
                    System.out.println("3. Modify Task");
                    System.out.println("4. Show All Tasks");
                    System.out.println("5. Show Recent (Stack)");
                    System.out.println("6. Show Pending (Queue)");
                    System.out.println("7. Exit");
                    System.out.print("Enter your choice: ");
                    choice = sc.nextInt();

                    switch (choice) {
                        case 1:
                            run.AddTasks(sc);
                            break;
                        case 2:
                            run.RemoveTask(sc);
                            break;
                        case 3:
                            run.ModifyTask(sc);
                            break;
                        case 4:
                            run.PrintAllTasks();
                            break;
                        case 5:
                            run.PrintRecentTasks();
                            break;
                        case 6:
                            run.PrintPendingTasks();
                            break;
                        case 7:
                            System.out.println("THANK YOU FOR USING THE TASK MANAGER.");
                            break;
                        default:
                            System.out.println("INVALID CHOICE! ü§¶‚Äç‚ôÇÔ∏è");
                    }

                    System.out.println();
                } while (choice <= 7);
            }

                public void AddTasks(Scanner sc) {
                    System.out.println();
                    System.out.print("Enter the number of tasks to add: ");
                    int n = sc.nextInt();
                    sc.nextLine();
                    for (int i = 0; i < n; i++) {
                        System.out.print("Enter task " + (i + 1) + ": ");
                        String task = sc.nextLine();
                        allTasks.add(task);
                        recentTasks.push(task);
                        pendingTasks.offer(task);
                    }

                    System.out.println("Tasks added successfully! üëç");
                    System.out.println("-----OUTPUT BY JAMES J-----");
                    System.out.println();
                }

                public void removeTask(Scanner sc) {
                    System.out.println();
                    if (allTasks.isEmpty()) {
                        System.out.println("No tasks to remove.");
                        return;
                    }
                    System.out.println();
                    System.out.print("Enter the task index to remove (1-based): ");
                    int index = sc.nextInt();
                    sc.nextLine();

                    if (index < 1 || index > allTasks.size()) {
                        System.out.println("Invalid index.");
                        return;
                    }

                    String removed = allTasks.remove(index - 1);
                    recentTasks.remove(removed);
                    pendingTasks.remove(removed);

                    System.out.println("Removed Task: " + removed);
                    System.out.println("-----OUTPUT BY JAMES J-----");
                }

                public void modifyTask(Scanner sc) {
                    if (allTasks.isEmpty()) {
                        System.out.println("No tasks to modify.");
                        return;
                    }

                    printAllTasks();
                    System.out.print("Enter the task index to modify (1-based): ");
                    int index = sc.nextInt();
                    sc.nextLine();

                    if (index < 1 || index > allTasks.size()) {
                        System.out.println("Invalid index.");
                        return;
                    }

                    String oldTask = allTasks.get(index - 1);
                    System.out.print("Enter the new task: ");
                    String newTask = sc.nextLine();

                    // Update in all structures
                    allTasks.set(index - 1, newTask);
                    recentTasks.remove(oldTask);
                    recentTasks.push(newTask);
                    pendingTasks.remove(oldTask);
                    pendingTasks.offer(newTask);

                    System.out.println("Task updated successfully.");
                    System.out.println("-----OUTPUT BY JAMES J-----");
                }

                public void printAllTasks() {
                    System.out.println("----- All Tasks (LinkedList) -----");
                    if (allTasks.isEmpty()) {
                        System.out.println("No tasks available.");
                    } else {
                        int i = 1;
                        for (String task : allTasks) {
                            System.out.println(i++ + ". " + task);
                        }
                    }
                    System.out.println("-----OUTPUT BY JAMES J-----");
                }

                public void printRecentTasks() {
                    System.out.println("----- Recently Added Tasks (Stack) -----");
                    if (recentTasks.isEmpty()) {
                        System.out.println("No recent tasks.");
                    } else {
                        int i = 1;
                        for (int j = recentTasks.size() - 1; j >= 0; j--) {
                            System.out.println(i++ + ". " + recentTasks.get(j));
                        }
                    }
                    System.out.println("-----OUTPUT BY JAMES J-----");
                }

                public void printPendingTasks() {
                    System.out.println("----- Pending Tasks (Queue) -----");
                    if (pendingTasks.isEmpty()) {
                        System.out.println("No pending tasks.");
                    } else {
                        int i = 1;
                        for (String task : pendingTasks) {
                            System.out.println(i++ + ". " + task);
                        }
                    }
                    System.out.println("-----OUTPUT BY JAMES J-----");
                }
            LinkedList<String> studentlidt = new LinkedList<>();
            Stack<String> recentTasks = new Stack<>();
            Queue<String> pendingTasks = new LinkedList<>();

        }

        }}}

        this can be done using 3 data structures